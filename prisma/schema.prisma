// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user Model
model User {
  id              String          @id @default(uuid())
  username        String          @unique
  fullname        String
  email           String          @unique
  password        String
  profile_picture String
  bio             String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  likes           Like[]
  threads         Thread[]
  replies         Reply[]
  follower        UserFollowing[] @relation(name: "Follower")
  following       UserFollowing[] @relation(name: "Following")
}

model UserFollowing {
  id          String   @id @default(uuid())
  follower    User     @relation(name: "Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation(name: "Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  FolowedAt   DateTime @default(now())
  isFollow    Boolean? @default(false)
}

model Thread {
  id         String   @id @default(uuid())
  content    String
  image      String?
  created_at DateTime @default(now())
  Like       Like[]
  replies    Reply[]
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  isLiked    Boolean? @default(false)
}

model Reply {
  id         String   @id @default(uuid())
  content    String
  image      String?
  created_at DateTime @default(now())
  Thread     Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id  String
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
}

model Like {
  id        String @id @default(uuid())
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  thread    Thread @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id String
}


// UUID adlaah sebauh string yang berisi secaraka angka dan huruf, jadi ketika menggunakan UUID hasilnya tidak akan sama dengan yang lain
// fbc27dd4-f90a-480f-a526-e49492978ee3
// b654c9f0-1504-4478-b7c0-07cbd25187aa